<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[주로 제가 개발하면서 느낀 경험, 이슈들을 주되게 작성합니다. 이슈 해결방법보다는 이슈가 생겼던 이유, 개념에 대한 설명을 작성합니다.]]></description><link>https://jsh0128.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 31 Dec 2023 01:26:26 GMT</lastBuildDate><item><title><![CDATA[2023 이뤘던것들 (feat.PLUGLINK)]]></title><description><![CDATA[벌써 2023년 끝이 왔네요. 올해는 개발적으로 어떤 성장이 있었는지 회고하는 글입니다. 어떤 기술에 대한 설명은 아닙니다. 참고부탁드립니다 👍 1분기 프론트의 배포시스템을 처음부터 끝까지(Jenkins, AWS…]]></description><link>https://jsh0128.github.io/develop/2023-이뤘던것들-(feat.pluglink)/</link><guid isPermaLink="false">https://jsh0128.github.io/develop/2023-이뤘던것들-(feat.pluglink)/</guid><pubDate>Sun, 31 Dec 2023 08:12:50 GMT</pubDate><content:encoded>&lt;p&gt;벌써 2023년 끝이 왔네요. 올해는 개발적으로 어떤 성장이 있었는지 회고하는 글입니다. 어떤 기술에 대한 설명은 아닙니다. 참고부탁드립니다 👍&lt;/p&gt;
&lt;h3&gt;1분기&lt;/h3&gt;
&lt;p&gt;프론트의 배포시스템을 처음부터 끝까지(Jenkins, AWS) 만들어보고, 개발또한 하나의 도메인 사업관리 도메인을 &lt;strong&gt;처음부터 끝까지 개발해보고, 운영&lt;/strong&gt;까지 해봤습니다. 개발부터 QA까지 딱 1분기를 차지했던 것 같습니다.
&lt;img src=&quot;https://github.com/jsh0128/jsh0128.github.io/assets/52942411/c3ecb653-8b3c-4ac0-9c48-b297b279b82b&quot; alt=&quot;근무시간&quot;&gt;&lt;/p&gt;
&lt;p&gt;엄청 시간에 쫓기며 개발했는데 돌아보니 되게 뿌듯했습니다. 하나의 도메인을 처음부터 끝까지 개발, 운영 해보는 과정에서 &lt;strong&gt;많이 성장하고 많은 책임&lt;/strong&gt;을 가지게 되었습니다.
&lt;img src=&quot;https://github.com/jsh0128/jsh0128.github.io/assets/52942411/d4a61fbd-1625-41f7-8145-6f926a4e1f31&quot; alt=&quot;개발한 화면&quot;&gt;&lt;/p&gt;
&lt;p&gt;보여줄 수 있는 정도는 이정도..? 대외비여서.. 구체적으로는 보여드리기 힘들다는 점 참고 부탁드립니다 😅&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;번외.&lt;/strong&gt; 배포 시스템을 Vercel을 사용하고 싶었으나, AWS를 이미 사용하고 있기에, 관리포인트가 늘어난다는점 + s3로 올리면 비용이 너무나도 저렴했기에.. 팀장님을 설득시킬 수가 없었습니다.. 이 내용으로 회의 4번인가 5번인가..ㅎㅎ&lt;/p&gt;
&lt;h3&gt;2분기&lt;/h3&gt;
&lt;p&gt;2분기에서는 운영관리쪽 개발과, 사업관리쪽 운영, 안정화를 진행하였습니다. 사업관리쪽에는 리팩토링 할 수 있는 부분을 하고, 커스텀 훅, 컴포넌트 재사용성을 늘렸고, 운영관리쪽은 사업관리 개발하면서 만든 컴포넌트 기반으로 빠르게 운영관리 도메인을 개발을 할 수 있었습니다.&lt;/p&gt;
&lt;h3&gt;3분기&lt;/h3&gt;
&lt;p&gt;새로운분이 입사하여 같이 개발을 하게 되었습니다. 코드리뷰 할 사람이 있다는게 큰 기쁨이더라구요..ㅎㅎ
&lt;img src=&quot;https://github.com/jsh0128/jsh0128.github.io/assets/52942411/817be785-ff54-498a-af3a-df91b096384e&quot; alt=&quot;코드리뷰 관련&quot;&gt;
커스텀 훅과, 컴포넌트 등 만드는 기준은 무엇인가, 툴팁이 왜 커스텀 훅인가, 툴팁은 props로 받을때 배열을 왜 받을 수 있어야 하나, 리스트를 맵 해주는건 뷰의 기준으로 봐야하는가.. 등등으로 해서 거의 이걸로 일주일에 한 13시간 이상 얘기한 것 같습니다 ㅋㅋ&lt;/p&gt;
&lt;p&gt;사업팀 쪽에서 프로젝트를 B2B로 팔 수 있을 것 같다는 말씀을 하셨습니다. 그래서 저희는 기존에 운영, 사업관리쪽 도메인을 이미 개발을 다 하였기 때문에 조금 더 완성도 있게, 대대적인 수정에 들어갔습니다.&lt;/p&gt;
&lt;p&gt;디자인이 전반적으로 거의 다 수정되었고, 기존에 컴포넌트들도 새로 만들어야 할 정도로 디자인이 수정되었습니다.
&lt;img src=&quot;https://github.com/jsh0128/jsh0128.github.io/assets/52942411/b47782f4-90fd-43af-85b5-8546d36daab6&quot; alt=&quot;v1&quot;&gt;
위의 사진이 전이고 아래 사전이 리뉴얼 후 입니다.
&lt;img src=&quot;https://github.com/jsh0128/jsh0128.github.io/assets/52942411/8c55ae3a-887b-453f-8a8f-3d3c533525e1&quot; alt=&quot;v2&quot;&gt;
컴포넌트를 효율적으로 재사용하기 위해서 &lt;strong&gt;atomic design pattern&lt;/strong&gt;을 도입하여 컴포넌트 구조를 잡았고, 이 외에 전역 상태를 제거하면서, &lt;strong&gt;react-query&lt;/strong&gt;를 도입하였습니다.&lt;/p&gt;
&lt;p&gt;또한 입력폼이 많이 렌더링이 많았던 컴포넌트는 &lt;strong&gt;React-hook-form을 도입하여, 렌더링 부분을 개선&lt;/strong&gt;하였습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;번외.&lt;/strong&gt; 컴포넌트가 다양해짐에 따라 스토리북 제안을 해보았지만.. 그정도의 규모는 아니라고 하셔서 조금 아쉽지만 아토믹 디자인 패턴정도만 적용하는것으로 마무리 지었습니다.&lt;/p&gt;
&lt;h3&gt;4분기&lt;/h3&gt;
&lt;p&gt;프로젝트가 B2B로 전환되어, 첫 계약한 회사가 딜라이브 입니다. 딜라이브가 요구한 기능들을 개발하며, 리뉴얼한 컴포넌트 리팩토링 및 유지보수를 진행하였습니다.&lt;/p&gt;
&lt;h2&gt;2023년 한 해&lt;/h2&gt;
&lt;p&gt;시간에 쫓겨 회사에서 밤도 새보고, 새로 입사하신 분과 개발적인 의견이 부딪혀 뜨겁게 토론도 해보고, 새로운 기술 스택도 도입해보고, 도메인을 처음부터 끝까지 운영도 해보고, 정말 재밌게 성장하였던 한 해 였습니다.&lt;/p&gt;
&lt;p&gt;이같이 재밌게 성장할 수 있었던건 옆에 휼륭한 동료들이 있어서 가능했던 것 같습니다.&lt;/p&gt;
&lt;p&gt;내년 2024년도 이와 같이 재밌게 성장했던 기록을 남길 수 있으면 좋겠습니다 😀&lt;/p&gt;
&lt;p&gt;오늘은 포스팅 여기서 마치도록 하겠습니다. 다들 새해 복 많이 받으세요 !!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[react-hook-form]]></title><description><![CDATA[react-hook-form 동작 방식 등 기본적인 것들에 대해서 하는 글입니다 👏 react-hook-form은 렌더링 개선을 위해 만들어진 라이브러리입니다.
useState를 이용하여 Input의 value를 관리하면, input…]]></description><link>https://jsh0128.github.io/develop/react-hook-form/</link><guid isPermaLink="false">https://jsh0128.github.io/develop/react-hook-form/</guid><pubDate>Fri, 04 Aug 2023 00:00:02 GMT</pubDate><content:encoded>&lt;p&gt;react-hook-form 동작 방식 등 기본적인 것들에 대해서 하는 글입니다 👏&lt;/p&gt;
&lt;p&gt;react-hook-form은 렌더링 개선을 위해 만들어진 라이브러리입니다.
useState를 이용하여 Input의 value를 관리하면, input에 onChange를 걸게되며 onChange 실행 시 useState관리하는 컴포넌트가 &lt;strong&gt;re-render&lt;/strong&gt; 됩니다. 이런 점을 해결하기 위해 나온 lib가 &lt;strong&gt;react-hook-form&lt;/strong&gt;입니다 👍&lt;/p&gt;
&lt;p&gt;react-hook-form 사용시 기본 모드로 사용하게 되면 register로 관리하게 되는데 register를 log 찍게 되면 name, ref, onChange, onBlur이 나오게 됩니다.
&lt;img width=&quot;375&quot; alt=&quot;image&quot; src=&quot;https://github.com/jsh0128/Blog/assets/52942411/2c9c8ba3-2908-4a27-8dc9-2ef7f5ed2c48&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;위의 사진을 참고하면 onBlur, onChange는 비동기입니다.
TypeScript 사용시 Promise로 타입을 반환하여 async await을 사용하게 되면 비동기로 동작하게 됩니다 !&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;register를 받아서 input에 전달하게 되면 onChange시에 렌더를 하지 않습니다.&lt;/strong&gt;
onChange시에 ref에 값을 전달 -&gt; onSubmit 을 하게되면 ref에 있는 값을 들고옴.&lt;/p&gt;
&lt;p&gt;input에 &lt;strong&gt;useState&lt;/strong&gt;로 관리하면 onChange시 값을 변경하게 되면 &lt;strong&gt;re-render&lt;/strong&gt;하는 반면 register로 관리하게 되면 상단에서 state를 관리해도 &lt;strong&gt;re-render&lt;/strong&gt;가 일어나지 않기 때문에 성능면에서 더 좋은 이점을 챙길 수 있습니다.&lt;/p&gt;
&lt;p&gt;극명하게 차이나는 시점은 아마 모달에서 input을 몇십개 이상 관리하는 컴포넌트에서 성능이 극명하게 차이가 난다고 생각합니다.&lt;/p&gt;
&lt;p&gt;예를 들어 onClick을 할때 서버에 값을 보내야 되는 상황에 모달에 input이 몇십개가 넘는 상황이면 모달에서 useState 전체를 관리하게 될것입니다.
그럼 input 하나의 값을 변경할 때 마다 모달 전체가 rerender가 일어나게 되며 성능에 큰 이슈를 줄 수 있으며 웹 사이트 자체가 버벅거림을 느낄 수도 있습니다. 하지만 react-hook-form으로 관리하게 되면 이런 일을 미연에 방지할 수 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 react-hook-form도 단점이 없을 수 있다고 할 수는 없습니다. 만약 UI 라이브러리를 사용하게 되면, 당연히 호환성이 안맞을 수 있으며 사용에 있어 어려움을 겪을 수 있습니다. 더 극명한 예를 들게 된다면 MUI와 react-hook-form을 같이 쓰게 된다면 더 어려움을 느낄 수 있을 것 입니다.&lt;/p&gt;
&lt;p&gt;왜냐하면 MUI 자체의 form을 지원하기 때문에(어떤식으로 동작하는지에 대한 이해는 없습니다.) React-hook-form과 사용함에 어려움이 있을 수 있습니다. 이부분에 유의하며 리렌더링 등 성능문제에 신경쓰며 개발해야 됩니다. 내가 현재 어떤 기술스택을 사용중인지 고려해보고 잘 도입해보시면 좋을 것 같습니다.&lt;/p&gt;
&lt;p&gt;오늘 포스팅은 여기서 마치도록 하겠습니다. 감사합니다 :)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[CSR, SSR, SSG]]></title><description><![CDATA[회사에서 처음으로 SSG 렌더링 방식을 접하고 좀 얕게 지식을 가지고 있다가, 이번에 블로그 만들겸 해서 공부하게 되었습니다. SSG의 렌더링 방식 하나를 설명하기 보다는 CSR, SSR…]]></description><link>https://jsh0128.github.io/develop/csr,ssr,-ssg/</link><guid isPermaLink="false">https://jsh0128.github.io/develop/csr,ssr,-ssg/</guid><pubDate>Sat, 06 May 2023 22:06:32 GMT</pubDate><content:encoded>&lt;p&gt;회사에서 처음으로 &lt;strong&gt;SSG&lt;/strong&gt; 렌더링 방식을 접하고 좀 얕게 지식을 가지고 있다가, 이번에 블로그 만들겸 해서 공부하게 되었습니다.&lt;/p&gt;
&lt;p&gt;SSG의 렌더링 방식 하나를 설명하기 보다는 &lt;strong&gt;CSR, SSR&lt;/strong&gt;도 같이 설명해보면 좋겠다고 생각되어 이와 같이 글을 쓰게 되었습니다 😀&lt;/p&gt;
&lt;h2&gt;CSR은 무엇인가&lt;/h2&gt;
&lt;p&gt;CSR는 약자이며 명칭은 Client Side Rendering입니다. 현재 React, Vue, Angular에서 채택된 렌더링 방식입니다.&lt;/p&gt;
&lt;p&gt;클라이언트에서 HTML을 그리며, JS가 동작하면서 필요한 데이터들을 주고 받아서 &lt;strong&gt;클라이언트에서만 렌더링&lt;/strong&gt;을 하게 되는 방식을 뜻합니다.&lt;/p&gt;
&lt;p&gt;CSR의 장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;초기 로딩 이후 페이지 전환이 빠르다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서버의 부담을 줄일 수 있다 혹은 웹 서버를 띄울 필요가 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSR의 단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SEO에 좋지않다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;서버에서 html을 내려주는 것이 아니라 페이지 접속 시에 html을 그리는 것이기 때문에 검색 엔진 봇이 빈 html로 인식할 수 있기 때문&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;초기 로딩이 많이 걸린다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;첫 로딩시 html을 그리고, js를 불러와야 되기 때문&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SSR은 무엇인가&lt;/h2&gt;
&lt;p&gt;SSR은 약자이며 명칭은 Server Side Rendering입니다. 서버에서 먼저 사용자에게 보여줄 페이지를 그리고 내려주는 방식입니다.&lt;/p&gt;
&lt;p&gt;첫 페이지에 도착하는 속도는 CSR보다 느릴 수 있지만, 화면이 구성되어 보여지는 시점은 더 빠릅니다.&lt;/p&gt;
&lt;p&gt;왜냐하면 CSR은 페이지 접속 시 빈 HTML을 보여주고 그 후에 HTML을 다시 재구성하기 때문에, 보여지는 시점은 SSR이 더 빠르다고 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;SSR의 장점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;첫 페이지 렌더링 속도가 빠르다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SEO에 좋다. - 이미 만들어진 html을 들고 있기 때문에 검색 엔진 봇이 크롤링이 가능하기 때문&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SSR의 단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;페이지 이동시 지속적으로 서버에 요청하여 페이지 이동이 느리다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;추가적인 웹 서버를 띄어야 함.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;SSG는 무엇인가&lt;/h2&gt;
&lt;p&gt;SSG는 약자이며 명칭은 Static Site Generation입니다. build 시점에 미리 html과 css를 만드는 방식입니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ISR&lt;/strong&gt;(Incremental Static Regeneration)이라는 개념도 있는데 이 개념도 SSG에 포함된다고 생각하시면 되겠습니다.&lt;/p&gt;
&lt;p&gt;ISR은 build 시점에 페이지를 렌더링 한 후 설정한 시간마다 페이지를 새로 렌더링합니다. 그럼 어느정도의 동적으로도 사용가능해집니다.&lt;/p&gt;
&lt;p&gt;백오피스를 만드는데 SSG의 렌더링 방식을 사용하여서 개발중입니다. 확실히 느낀점은 초기 렌더링은 CSR보다 빨라서 좋더라구요. 그리고 페이지 이동을 하여도 이미 만들어진 html과 css가 있기 때문에 느리지 않다고 좋다는 느낌을 많이 받았습니다.&lt;/p&gt;
&lt;p&gt;현재 S3, Cloudfront, Route53을 통하여 배포하고, dynamic routing은 lambda@Edge를 사용하여 해결하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/jsh0128/jsh0128.github.io/assets/52942411/735e5b34-d2fd-4099-b8cb-8c995ea445ea&quot; alt=&quot;Group 15 (1)&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ISR을 도입 안한 이유는&lt;/strong&gt; 새로 만든 페이지를 프론트에서 지속적으로 들고있어야 하는데 이 페이지수가 적은 양도 아니였고, 이미 html과 css는 build시점에 만들었기 때문에 페이지 이동 속도 측면에서 느리지 않다고 판단했기 때문입니다.&lt;/p&gt;</content:encoded></item></channel></rss>